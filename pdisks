#!/bin/bash

: <<HEADER
Protect Disks v1.2 on 30 January 2018
Copyright (c) 2018 by Jeremy O'Connell - Cyberweb Solutions, LLC @ www.cyberws.com

Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
HEADER

######################################################################
# Variables
######################################################################

# Version number
VERSION="1.2"

# Capture all flags
ddargs=$@

# Capture first
action=$1

# Set user's home directory
userhome="/home/"$USER

# Set app config directory
userhome+="/.config/pdisks/"

# Set config file
configfile="$userhome/config"

# Version timestamp file
versiontsfile="$userhome/versionts"

# Header
######################################################################
echo "☀ Protect Disks v$VERSION ☀ "

# Footer
######################################################################
FOOTER() {
exit
}

# Error Msg
######################################################################
ERROR() {
	echo "🗵 $1"
}

# Success Msg
######################################################################
SUCCESS() {
	echo "☑ $1"
}

# Menu Item Display
######################################################################
MENU_ITEM() {
	printf "%-10s %-2s %s\n" "$1" "" "$2";
}

# Get Protected Directories
######################################################################
GETPROTECTED() {
	# Build config
	IFS=$'\n' read -rd '' -a CONFIG_VARS <<< "$configdata"

	for CONFIG_VARS_DATA in "${CONFIG_VARS[@]}"
	do
		# Split data
		IFS='=' read -a CONFIG_DATA <<< "${CONFIG_VARS_DATA}"

		# Remove first and last quotes
		CONFIG_DATA_VALUE="${CONFIG_DATA[1]//\"/}"
		CONFIG_ARRAY[${CONFIG_DATA[0]}]="$CONFIG_DATA_VALUE"

		# Declare SDEVLIST
		declare -Ag SDEVLIST

		# Build SDEVLIST
		if test 'SDEVLIST' == "${CONFIG_DATA[0]}"
		then
			# Build list
			CURRENTDEVS=($CONFIG_DATA_VALUE);
			for CURRENTDEV in "${CURRENTDEVS[@]}"
			do
				SDEVLIST[$CURRENTDEV]="y"
			done
		fi
	done
}

######################################################################
# Check for protected devices file
######################################################################

# If .config doesn't exist then create it
if [ ! -d "$userhome" ]
then
	mkdir -p $userhome
fi

# If config file doesn't exist create it
if [ ! -f "$configfile" ]
then
	touch $configfile
fi

# Read config file
configdata=`cat $configfile`

# If config is blank run protect to build
if [ -z "$configdata" ]
then
	action="protect"
fi

######################################################################
# Display version reminder check
######################################################################

# Get current timestamp
curts=`date +%s`

# Calculate 60 days ago in unixtime
olduts=$(($curts-5184000))

# Write version timestamp file, if missing
if [ -f "$versiontsfile" ]
then
	fileuts=`cat $versiontsfile`
else
	echo "$curts" > $versiontsfile
	fileuts="$curts"
fi

# Compare filets with olduts and display message if necessary
if (($olduts > $fileuts))
then
	echo "Your version could be out of date!  You haven't checked in 60 days."
	echo -n "Would you like to check for a new version? [Yn] "
	read CHKVERSION

	# Update version reminder timestamp file
	echo "$curts" > $versiontsfile
	echo $'\n'"-> Version reminder check updated to remind in 60 days"

	if test "$CHKVERSION" == "n"
	then
		echo "Skipping version check, but highly recommended!"
	else
		echo "Starting version check..."
		action="version"
	fi
fi

# Build file with protected devices
######################################################################
if test "$action" == "protect"
then
	# Get sd* list
	SDEVLIST=`ls /dev/sd*`

	# Write to config file
	echo 'SDEVLIST="'$SDEVLIST'"' > $configfile

	# Display notice to user
	SUCCESS "Connected/online drive(s) and partition(s) saved to protected device list"
	SUCCESS "If you attempted to issue a command please rerun - up arrow then hit enter!"

	FOOTER
fi

# List protected devices
######################################################################
if test "$action" == "list"
then
	# Protected directories
	GETPROTECTED

	echo "Protected drives and partitions:"
	for i in "${!SDEVLIST[@]}"
	do
		echo "$i"
	done

	FOOTER
fi

# Version check
######################################################################
if test "$action" == "version"
then
	# Load current version from github
	GH_VERSION=`curl -s https://raw.githubusercontent.com/cleverwise/pdisks/master/version`

	if [ -z $GH_VERSION ]
	then
		MSG="🗷 ERROR: UNABLE TO CONNECT TO GITHUB VERSION CHECK!!!"
		GH_VERSION="Unknown - can NOT connect to GitHub"
	else
		if (( $(echo "$GH_VERSION > $VERSION" | bc -l) ))
		then
			MSG="🗷 UPGRADE REQUIRED! VERSIONS DO NOT MATCH!"
		else
			MSG="🗹 LATEST VERSION!"
		fi
	fi
	echo "$MSG"$'\n'
	echo "Github Version: $GH_VERSION"
	echo "Installed Version: $VERSION"
	echo $'\n'"Github: https://github.com/cleverwise/pdisks"

	FOOTER
fi

# Credits
######################################################################
if test "$action" == "credits"
then
	ACTION_BANNER "Credits"

	echo "Lead programmer: Jeremy O'Connell"
	echo "🗁  Cyberweb Solutions, LLC -> www.CyberWS.com"$'\n'
	echo "Testing and collaboration: Joe Collins"
	echo "🗁  EzeeLinux -> www.EzeeLinux.com"$'\n'

	FOOTER
fi

# Software
######################################################################
if test "$action" == "software"
then
	echo "Software Titles:"$'\n'

	# Load current software from github
	GH_SOFTWARE=`curl -s https://raw.githubusercontent.com/cleverwise/connect2ssh/master/software`

	echo "$GH_SOFTWARE"

	FOOTER
fi

# Help
######################################################################
if test "$action" == "help"
then
	script_name=${0##*/}

	echo "This utility will call dd AFTER verifying you haven't accidently entered one of your system drive(s)/partitions(s)"$'\n'
	echo "When writing out images to USB sticks a mistype could easily destroy your system.  All options and flags from dd still apply. However before running dd the information will be checked to prevent damage to your computer.  If all passes then dd will be loaded."$'\n'

	echo "Commands:"$'\n'

	MENU_ITEM "protect" "Saves currently connected storage drives and partitions to protect"
	MENU_ITEM "list" "Shows a list of protected drives and partitions"
	MENU_ITEM "version" "Check for new version"
	MENU_ITEM "software" "View software titles"
	MENU_ITEM "credits" "View programmers/contributors"

	echo $'\n'"For standard operation simply enter the name of this script and normal dd commands (ALL dd commands/flags are supported):"$'\n'
	echo "Example:"$'\n'"$script_name if=\"/dev/null\" of=\"/dev/sdv\""$'\n'

	FOOTER
fi

# Check command and if possible send to dd
######################################################################

# Protected directories
GETPROTECTED

# Variables
DEF_IN="n"
DEF_OUT="n"
IFEXISTS="n"
	
# Check each command line argument
for i
do
	# Verify if is defined
	if [[ $i = *"if="* ]]
	then
		DEF_IN="y"
	fi		

	# Verify of is safe
	if [[ $i = *"of="* ]]
	then
		# Set DEF_OUT defined
		DEF_OUT="y"

		# Get /dev/sd?
		DEVCHK="${i//of=/}"

		# Remove trailing slash
		DEVCHK=${DEVCHK%/}

		# Check protect list
		if test "${SDEVLIST[$DEVCHK]+isset}"
		then
			ERROR "Aborting protected drive/partition!!!"
			ERROR "Dangerous - not allowed!"
			exit
		fi
	fi
done

# Verify if and of are defined
if [[ $DEF_IN == "y" && $DEF_OUT == "y" ]]
then
	SUCCESS "Protected Partitions and Drives Are Safe!"

	echo -n "About to overwrite $DEVCHK? Type confirm to proceed: "
	read CONFIRM_ANSWER

	if test "$CONFIRM_ANSWER" == "confirm"
	then
 		echo "Now passing the following to dd:"
		echo "$ddargs"
		sudo dd $ddargs
	else
		echo "Aborting since confirm was not typed!"
	fi
else
	ERROR "You need both if= AND of="
fi

